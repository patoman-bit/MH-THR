mod patterns;
mod responses;
mod memory;

use patterns::get_pattern_response;
use memory::Memory;

pub fn start_conversation() {
    let mut memory = Memory::new(); // Tracks user input for contextual replies
    println!("ELIZA: Hi! I'm here to listen. Type 'Quit' to exit.\n");

    loop {
        use std::io::{self, Write};
        print!("You: ");
        io::stdout().flush().unwrap();
        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let input = input.trim();

        if input.eq_ignore_ascii_case("quit") {
            println!("ELIZA: Goodbye! Take care.\n");
            break;
        }

        memory.add_input(input.to_string()); // Save user input to memory
        let response = get_pattern_response(input, &memory); // Generate response
        println!("\x1b[32mELIZA: {}\x1b[0m\n", response); // Highlight response in green
    }
}